BASIC BRANCHING
1) pwd goto root testgit directory
2) git branch first_branch
to create a new branch off the current master commited
3) git branch
to see we are at default master branch
4) git checkout first_branch
5) git branch
to see we are now switched to first_branch
6) create /calendar/fallbreak.txt file
7) cd calendar and git add above file
8) git commit -m "first branch commit"
9) pwd
to get to the root testgit/calendar directory
10) ls to see fallbreak.txt file
11) git checkout master
12) git branch
get an error, as there is no current working /calendar directory in the master branch
13) cd .. to goto /testgit
14) git branch
see we're at master branch
15) ls
*** WE DO NOT see calendar folder, as we didn't commit it on master branch
16) git checkout first_branch
17) pwd to root testgit directory
18) ls to see calendar folder, as we are on the first_branch directory and had committed it there
19) switch to the master branch to add and commit /doc/todo2.txt
12) git branch -v
to see latest commit ID on master branch

BASIC MERGING
1) cd to /testgit root repo directory
2) git checkout master
   git branch
to be ON the master integration target branch
3) git status
to ensure all commits are in on master
4) git merge first_branch
to merge feature branch into integration branch
may need to insert (i) comments and :wq! to exit editor
5) git branch -v
to see merge comment and should see a NEW ID that differs from first_branch ID as master moved UPSTREAM
after first_branch, but before merge; OTHERWISE if no UPSTREAM changes, master branch ID should match
the first_branch ID as a "fast-forwards merge occurs"
6) ls
now should see feature branch new calendar folder and fallbreak.txt file under testgit
these should also show up in intellij editor as well
7) git checkout first_branch
8) ls /doc
should NOT see todo2.txt since it was committed UPSTRREAM on master from the initial first_branch branch
commit point
9) git checkout master
10) should see file in (8) as this was a commit on UPSTREAM master

MERGE CONFLICT
(from BASIC MERGING)
4.5) merge conflict notice if SAME file was modified on both branches
4.6) git status to view files in conflict
4.7) look in files for <<<<< HEAD(master) ==== (other branch) >>>>>
and edit, add, commit the file
4.8) on commit, the vim editor comes up and you can add a commit message (like in (4) above)

***** I love branches!  (on master after test_conflict branch commit)
